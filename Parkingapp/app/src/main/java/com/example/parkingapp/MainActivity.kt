// MainActivity.kt

package com.example.parkingapp

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.compose.LocalLifecycleOwner
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.parkingapp.data.api.RetrofitInstance
import com.example.parkingapp.data.model.Reservation
import com.example.parkingapp.data.preferences.UserPreferences
import com.example.parkingapp.repository.ParkingLotRepository
import com.example.parkingapp.screens.auth.LoginScreen
import com.example.parkingapp.screens.auth.RegisterScreen
import com.example.parkingapp.screens.detail.ParkingDetailScreen
import com.example.parkingapp.screens.main.ParkingListScreen
import com.example.parkingapp.screens.mypage.MyPageScreen
import com.example.parkingapp.screens.parkingflow.*
import com.example.parkingapp.screens.reservation.*
import com.example.parkingapp.ui.theme.ParkingappTheme
import com.example.parkingapp.viewmodel.AuthViewModel
import com.example.parkingapp.viewmodel.ParkingListViewModel
import androidx.activity.viewModels // ‚úÖ Ïù¥Í±∏ Íº≠ import Ìï¥Ïïº Ìï®
import com.example.parkingapp.screens.mypage.MyPageTabScreen


class MainActivity : ComponentActivity() {

    private val parkingListViewModel: ParkingListViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            ParkingappTheme {
                val navController = rememberNavController()
                val context = LocalContext.current

                val api = RetrofitInstance.create(context)
                val repository = ParkingLotRepository(api)

                // ViewModelFactoryÎ•º ÏÇ¨Ïö©Ìï¥ ParkingListViewModel ÏÉùÏÑ±
                val viewModel: ParkingListViewModel = viewModel(factory = object : ViewModelProvider.Factory {
                    @Suppress("UNCHECKED_CAST")
                    override fun <T : ViewModel> create(modelClass: Class<T>): T {
                        return ParkingListViewModel(context.applicationContext, repository) as T
                    }
                })

                // ViewModelFactoryÎ•º ÏÇ¨Ïö©Ìï¥ AuthViewModel ÏÉùÏÑ±
                val authViewModel: AuthViewModel = viewModel(factory = object : ViewModelProvider.Factory {
                    @Suppress("UNCHECKED_CAST")
                    override fun <T : ViewModel> create(modelClass: Class<T>): T {
                        return AuthViewModel(context.applicationContext) as T
                    }
                })

                val lifecycleOwner  = LocalLifecycleOwner.current

                // ‚úÖ ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
                DisposableEffect(Unit) {
                    val observer = LifecycleEventObserver { _, event ->
                        if (event == Lifecycle.Event.ON_STOP) {
                            Log.d("AutoLogout", "Ïï±Ïù¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Ïù¥ÎèôÎê® ‚Üí Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨")
                            authViewModel.logout()
                        }
                    }
                    lifecycleOwner.lifecycle.addObserver(observer)
                    onDispose {
                        lifecycleOwner.lifecycle.removeObserver(observer)
                    }
                }

                // SharedPreferencesÏóêÏÑú JWT ÌÜ†ÌÅ∞ ÌôïÏù∏
                val userPreferences = remember { UserPreferences(context) }
                val isLoggedIn = remember { userPreferences.getToken() != null }

                // ÌÜ†ÌÅ∞ Ï°¥Ïû¨ Ïó¨Î∂ÄÏóê Îî∞Îùº ÏãúÏûë ÌôîÎ©¥ Í≤∞Ï†ï
                val startDestination = if (isLoggedIn) "list" else "login"

                // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ìò∏Ïä§Ìä∏ ÏÑ§Ï†ï
                NavHost(navController = navController, startDestination = startDestination) {

                    // Î°úÍ∑∏Ïù∏ ÌôîÎ©¥
                    composable("login") {
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç LoginScreen ÏßÑÏûÖ")
                        }
                        LoginScreen(viewModel = authViewModel, navController = navController)
                    }

                    // ÌöåÏõêÍ∞ÄÏûÖ ÌôîÎ©¥
                    composable("register") {
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç RegisterScreen ÏßÑÏûÖ")
                        }
                        RegisterScreen(viewModel = authViewModel, navController = navController)
                    }

                    // Ï£ºÏ∞®Ïû• Î™©Î°ù ÌôîÎ©¥
                    composable("list") {
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç ParkingListScreen ÏßÑÏûÖ")
                        }
                        ParkingListScreen(
                            viewModel = viewModel,
                            navController = navController
                        ) { selected ->
                            navController.navigate("detail/${selected.id}")
                        }
                    }

                    // Ï£ºÏ∞®Ïû• ÏÉÅÏÑ∏ ÌôîÎ©¥
                    composable("detail/{parkingId}") { backStackEntry ->
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç ParkingDetailScreen ÏßÑÏûÖ")
                        }
                        val parkingId = backStackEntry.arguments?.getString("parkingId")?.toIntOrNull()
                        val parkingList by viewModel.parkingList.collectAsState()
                        val selected = remember(parkingList, parkingId) {
                            parkingList.find { it.id == parkingId }
                        }
                        if (selected != null) {
                            ParkingDetailScreen(
                                parking = selected,
                                onReserveClick = { navController.navigate("reservation/$it") },
                                onBack = { navController.popBackStack() }
                            )
                        }
                    }

                    // ÏòàÏïΩ ÌôîÎ©¥
                    composable("reservation/{parkingId}") { backStackEntry ->
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç ReservationScreen ÏßÑÏûÖ")
                        }
                        val parkingId = backStackEntry.arguments?.getString("parkingId")?.toIntOrNull()
                        val parkingList = viewModel.parkingList.collectAsState()
                        val selected = parkingList.value.find { it.id == parkingId }

                        if (selected != null) {
                            ReservationScreen(
                                parking = selected,
                                onBack = { navController.popBackStack() },
                                navController = navController,
                                viewModel = viewModel
                            )
                        }
                    }

                    // Ï£ºÏ∞®Ïπ∏ ÏÑ†ÌÉù ÌôîÎ©¥
                    composable("selectSlot/{parkingLotId}") { backStackEntry ->
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç SlotSelectionScreen ÏßÑÏûÖ")
                        }
                        val parkingLotId = backStackEntry.arguments?.getString("parkingLotId")?.toLongOrNull()
                        val timeSlots = navController.previousBackStackEntry?.savedStateHandle?.get<List<String>>("selectedTimeSlots")
                        val selectedDate = navController.previousBackStackEntry?.savedStateHandle?.get<String>("selectedDate")
                        if (parkingLotId != null && timeSlots != null && selectedDate != null) {
                            SlotSelectionScreen(
                                parkingLotId = parkingLotId,
                                date = selectedDate, // ÌÖåÏä§Ìä∏Ïö© Í≥†Ï†ï ÎÇ†Ïßú
                                timeSlots = timeSlots,
                                navController = navController,
                                viewModel = viewModel,
                                onSlotSelected = { selectedSlotId ->
                                    val fakeReservation = Reservation(
                                        id = viewModel.getNextReservationId(),
                                        parkingLotName = viewModel.parkingList.value.first { it.id == parkingLotId.toInt() }.name,
                                        slotId = selectedSlotId ?: 0L,
                                        slotNumber = selectedSlotId?.toInt() ?: 0,
                                        startTime = timeSlots.firstOrNull() ?: "00:00",
                                        endTime = timeSlots.lastOrNull() ?: "00:00",
                                        totalPrice = timeSlots.size * 2000,
                                        status = "RESERVED",
                                        isSlotOpened = false
                                    )
                                    navController.previousBackStackEntry?.savedStateHandle?.set("pendingReservation", fakeReservation)
                                    navController.navigate("payment")
                                }
                            )
                        }
                    }

                    // Í≤∞Ï†ú ÌôîÎ©¥
                    composable("payment") {
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç PaymentScreen ÏßÑÏûÖ")
                        }
                        val reservation = navController.previousBackStackEntry
                            ?.savedStateHandle?.get<Reservation>("pendingReservation")
                        if (reservation != null) {
                            PaymentScreen(
                                reservation = reservation,
                                navController = navController,
                                viewModel = parkingListViewModel,
                                onBack = { navController.popBackStack() }
                            )
                        }
                    }

                    // ÎßàÏù¥ÌéòÏù¥ÏßÄ ÌôîÎ©¥
                    composable("mypage") {
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç MyPageTabScreen ÏßÑÏûÖ")
                        }
                        MyPageTabScreen(
                            viewModel = viewModel,
                            authViewModel = authViewModel,
                            onBack = { navController.popBackStack() },
                            navController = navController
                        )
                    }

                    // ÏûÖÏ∞® ÏïàÎÇ¥
                    composable("notice/{reservationId}/{slotId}") { backStackEntry ->
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç ParkingNoticeScreen ÏßÑÏûÖ")
                        }
                        val id = backStackEntry.arguments?.getString("reservationId")?.toIntOrNull()
                        val slotId = backStackEntry.arguments?.getString("slotId")?.toLongOrNull()

                        if (id != null && slotId != null) {
                            ParkingNoticeScreen(
                                onProceed = {
                                    navController.navigate("start/$id/$slotId")
                                },
                                onBack = { navController.popBackStack() }
                            )
                        }
                    }

                    // ÏûÖÏ∞®: Ï∞®Îã®Í∏∞ Ïó¥Í∏∞
                    composable("start/{reservationId}/{slotId}") { backStackEntry ->
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç GateOpenScreen ÏßÑÏûÖ")
                        }
                        val reservationId = backStackEntry.arguments?.getString("reservationId")?.toLongOrNull()
                        val slotId = backStackEntry.arguments?.getString("slotId")?.toLongOrNull()

                        if (reservationId != null && slotId != null) {
                            GateOpenScreen(
                                reservationId = reservationId,
                                slotId = slotId,
                                navController = navController,
                                viewModel = viewModel,
                                onBack = { navController.popBackStack() }
                            )
                        }
                    }

                    // Ï∂úÏ∞® ÏïàÎÇ¥
                    composable("exitNotice/{reservationId}/{slotId}") { backStackEntry ->
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç ExitNoticeScreen ÏßÑÏûÖ")
                        }

                        val reservationId = backStackEntry.arguments?.getString("reservationId")?.toLongOrNull()
                        val slotId = backStackEntry.arguments?.getString("slotId")?.toLongOrNull()

                        if (reservationId != null && slotId != null) {
                            ExitNoticeScreen(
                                reservationId = reservationId,
                                slotId = slotId,
                                onBack = { navController.popBackStack() },
                                navController = navController
                            )
                        }
                    }

                    // Ï∂úÏ∞®: Ï∞®Îã®Í∏∞ Îã´Í∏∞
                    composable("gateClose/{reservationId}/{slotId}") { backStackEntry ->
                        LaunchedEffect(Unit) {
                            Log.d("Navigation", "üìç GateCloseScreen ÏßÑÏûÖ")
                        }
                        val reservationId = backStackEntry.arguments?.getString("reservationId")?.toLongOrNull()
                        val slotId = backStackEntry.arguments?.getString("slotId")?.toLongOrNull()

                        if (reservationId != null && slotId != null) {
                            GateCloseScreen(
                                reservationId = reservationId,
                                slotId = slotId,
                                navController = navController,
                                viewModel = viewModel,
                                onBack = { navController.popBackStack() }
                            )
                        }
                    }
                }

            }
        }
    }
}
